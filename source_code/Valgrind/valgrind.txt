valgrind --leak-check=full ./valgrind.exe
==6439== Memcheck, a memory error detector
==6439== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6439== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==6439== Command: ./valgrind.exe
==6439== 
==6439== Conditional jump or move depends on uninitialised value(s)
==6439==    at 0x40088A: main (valgrind.cpp:7)
==6439== 
in if-statement
==6439== Invalid write of size 4
==6439==    at 0x4008CC: main (valgrind.cpp:10)
==6439==  Address 0x5ad6c94 is 0 bytes after a block of size 20 alloc'd
==6439==    at 0x4C3B24B: operator new[](unsigned long) (vg_replace_malloc.c:423)
==6439==    by 0x400878: main (valgrind.cpp:4)
==6439== 
==6439== Invalid read of size 4
==6439==    at 0x4008FA: main (valgrind.cpp:12)
==6439==  Address 0x5ad6c94 is 0 bytes after a block of size 20 alloc'd
==6439==    at 0x4C3B24B: operator new[](unsigned long) (vg_replace_malloc.c:423)
==6439==    by 0x400878: main (valgrind.cpp:4)
==6439== 
a[5] = 5
==6439== 
==6439== HEAP SUMMARY:
==6439==     in use at exit: 20 bytes in 1 blocks
==6439==   total heap usage: 3 allocs, 2 frees, 76,820 bytes allocated
==6439== 
==6439== 20 bytes in 1 blocks are definitely lost in loss record 1 of 1
==6439==    at 0x4C3B24B: operator new[](unsigned long) (vg_replace_malloc.c:423)
==6439==    by 0x400878: main (valgrind.cpp:4)
==6439== 
==6439== LEAK SUMMARY:
==6439==    definitely lost: 20 bytes in 1 blocks
==6439==    indirectly lost: 0 bytes in 0 blocks
==6439==      possibly lost: 0 bytes in 0 blocks
==6439==    still reachable: 0 bytes in 0 blocks
==6439==         suppressed: 0 bytes in 0 blocks
==6439== 
==6439== For counts of detected and suppressed errors, rerun with: -v
==6439== Use --track-origins=yes to see where uninitialised values come from
==6439== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
